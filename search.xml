<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Celery介绍和使用</title>
    <url>/2021/05/31/Celery%E4%BB%8B%E7%BB%8D%E5%92%8C%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h3 id="Celery应用场景"><a href="#Celery应用场景" class="headerlink" title="Celery应用场景"></a>Celery应用场景</h3><p>Celery 是一个 基于python开发的分布式异步消息任务队列，通过它可以轻松的实现任务的异步处理，举几个实例场景中可用的例子：</p>
<ol>
<li><p>你想对100台机器执行一条批量命令，可能会花很长时间 ，但你不想让你的程序等着结果返回，而是给你返回 一个任务ID,你过一段时间只需要拿着这个任务id就可以拿到任务执行结果， 在任务执行ing进行时，你可以继续做其它的事情。 </p>
</li>
<li><p>你想做一个定时任务，比如每天检测一下你们所有客户的资料，如果发现今天 是客户的生日，就给他发个短信祝福。</p>
<span id="more"></span></li>
</ol>
<h3 id="Celery基本流程"><a href="#Celery基本流程" class="headerlink" title="Celery基本流程"></a>Celery基本流程</h3><img src="/images/celery/Celery执行流程图.jpg" align="center">

<h3 id="搭建运行环境"><a href="#搭建运行环境" class="headerlink" title="搭建运行环境"></a>搭建运行环境</h3><ol>
<li><p>系统版本<br><code>Ubuntu 18.04.5 LTS (GNU/Linux 4.15.0-143-generic x86_64)</code></p>
</li>
<li><p>更换国内源<br><code>sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak</code><br><code>sudo nano /etc/apt/sources.list</code></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除sources.list内容，替换为以下内容</span></span><br><span class="line">deb http:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/ubuntu/</span> bionic main restricted universe multiverse</span><br><span class="line">deb http:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/ubuntu/</span> bionic-security main restricted universe multiverse</span><br><span class="line">deb http:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/ubuntu/</span> bionic-updates main restricted universe multiverse</span><br><span class="line">deb http:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/ubuntu/</span> bionic-proposed main restricted universe multiverse</span><br><span class="line">deb http:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/ubuntu/</span> bionic-backports main restricted universe multiverse</span><br><span class="line">deb-src http:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/ubuntu/</span> bionic main restricted universe multiverse</span><br><span class="line">deb-src http:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/ubuntu/</span> bionic-security main restricted universe multiverse</span><br><span class="line">deb-src http:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/ubuntu/</span> bionic-updates main restricted universe multiverse</span><br><span class="line">deb-src http:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/ubuntu/</span> bionic-proposed main restricted universe multiverse</span><br><span class="line">deb-src http:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/ubuntu/</span> bionic-backports main restricted universe multiverse</span><br></pre></td></tr></table></figure>
<p><code>sudo apt-get update</code></p>
</li>
<li><p>安装redis-server</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">sudo apt-<span class="builtin-name">get</span> install redis-server </span><br><span class="line"><span class="comment"># 检查redis-server是否启动</span><span class="built_in"></span></span><br><span class="line"><span class="built_in">service </span>redis status</span><br></pre></td></tr></table></figure></li>
<li><p>安装pip3<br><code>sudo apt install python3-pip</code></p>
</li>
<li><p>升级pip至20.2.1版本</p>
<p><code>sudo pip3 install --upgrade pip==20.2.1</code></p>
</li>
<li><p>安装 celery,redis</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">pip</span> install -U Celery==<span class="number">4</span>.<span class="number">2</span>.<span class="number">2</span></span><br><span class="line"><span class="attribute">pip</span> install <span class="string">&quot;celery[librabbitmq,redis,auth,msgpack]&quot;</span></span><br></pre></td></tr></table></figure></li>
<li><p>安装 python-celery-common</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">sudo apt <span class="keyword">update</span></span><br><span class="line">sudo apt install <span class="keyword">python</span>-celery-common</span><br></pre></td></tr></table></figure></li>
<li><p>软件最终安装环境如下</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Ubuntu</span> <span class="number">18</span>.<span class="number">04</span>.<span class="number">5</span> LTS</span><br><span class="line"><span class="attribute">Python</span> <span class="number">3</span>.<span class="number">6</span>.<span class="number">9</span> </span><br><span class="line"><span class="attribute">pip</span>==<span class="number">20</span>.<span class="number">2</span>.<span class="number">1</span></span><br><span class="line"><span class="attribute">redis</span> <span class="number">3</span>.<span class="number">5</span>.<span class="number">3</span></span><br><span class="line"><span class="attribute">celery</span>-<span class="number">4</span>.<span class="number">2</span>.<span class="number">2</span></span><br><span class="line"><span class="attribute">amqp</span>-<span class="number">5</span>.<span class="number">0</span>.<span class="number">6</span> </span><br><span class="line"><span class="attribute">billiard</span>-<span class="number">3.6.4.0</span> </span><br><span class="line"><span class="attribute">cached</span>-property-<span class="number">1</span>.<span class="number">5</span>.<span class="number">2</span> </span><br><span class="line"><span class="attribute">click</span>-<span class="number">7</span>.<span class="number">1</span>.<span class="number">2</span> </span><br><span class="line"><span class="attribute">click</span>-didyoumean-<span class="number">0</span>.<span class="number">0</span>.<span class="number">3</span> </span><br><span class="line"><span class="attribute">click</span>-plugins-<span class="number">1</span>.<span class="number">1</span>.<span class="number">1</span> </span><br><span class="line"><span class="attribute">click</span>-repl-<span class="number">0</span>.<span class="number">1</span>.<span class="number">6</span></span><br><span class="line"><span class="attribute">kombu</span>-<span class="number">5</span>.<span class="number">1</span>.<span class="number">0</span> </span><br><span class="line"><span class="attribute">prompt</span>-toolkit-<span class="number">3</span>.<span class="number">0</span>.<span class="number">18</span> </span><br><span class="line"><span class="attribute">vine</span>-<span class="number">5</span>.<span class="number">0</span>.<span class="number">0</span> wcwidth-<span class="number">0</span>.<span class="number">2</span>.<span class="number">5</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="Celery代码示例"><a href="#Celery代码示例" class="headerlink" title="Celery代码示例"></a>Celery代码示例</h3><h4 id="异步任务（Async-Task）"><a href="#异步任务（Async-Task）" class="headerlink" title="异步任务（Async Task）"></a>异步任务（Async Task）</h4><ul>
<li>step1:创建一个celery_demo的python Package文件夹 在<code>__init__.py</code>中添加如下代码<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line">from celery import Celery</span><br><span class="line"></span><br><span class="line"><span class="meta">#include:导入指定的任务模块</span></span><br><span class="line"><span class="meta">#这一次创建 app，并没有直接指定 broker(消息中间件来接收和发送任务消息) 和 backend(存储结果)。而是在配置文件中</span></span><br><span class="line">app = Celery(</span><br><span class="line">    <span class="string">&#x27;demo&#x27;</span>,</span><br><span class="line">    include=[</span><br><span class="line">        <span class="string">&#x27;celery_demo.task1&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;celery_demo.task2&#x27;</span>,</span><br><span class="line">    ]</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="meta"># 通过celery实例加载配置模块</span></span><br><span class="line">app.config_from_object(</span><br><span class="line">    <span class="string">&#x27;celery_demo.celeryconfig&#x27;</span>,</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li>
<li>step2:在celery_demo文件夹下新建一个celeryconfig.py文件（Celery的配置文件） 添加如下代码<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment">#broker(消息中间件来接收和发送任务消息)</span></span><br><span class="line"><span class="attr">broker_url</span> = <span class="string">&#x27;redis://localhost:6379/1&#x27;</span></span><br><span class="line"><span class="comment">#backend(存储worker执行的结果)</span></span><br><span class="line"><span class="attr">result_backend</span> = <span class="string">&#x27;redis://localhost:6379/2&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#设置时间参照，不设置默认使用的UTC时间</span></span><br><span class="line"><span class="attr">timezone</span> = <span class="string">&#x27;Asia/Shanghai&#x27;</span></span><br><span class="line"><span class="comment">#指定任务的序列化</span></span><br><span class="line"><span class="attr">task_serializer</span> =<span class="string">&#x27;json&#x27;</span></span><br><span class="line"><span class="comment">#指定执行结果的序列化</span></span><br><span class="line"><span class="attr">result_serializer</span> =<span class="string">&#x27;json&#x27;</span></span><br><span class="line"><span class="attr">accept_content</span>=[<span class="string">&#x27;json&#x27;</span>]  <span class="comment"># Ignore other content</span></span><br></pre></td></tr></table></figure></li>
<li>step3:在celery_demo文件夹下新建task1.py和task2.py文件<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># task1.py</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> celery_demo <span class="keyword">import</span> app</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">x,y</span>):</span></span><br><span class="line">    time.sleep(<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">return</span> x+y</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># task2.py</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> celery_demo <span class="keyword">import</span> app</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mut</span>(<span class="params">x,y</span>):</span></span><br><span class="line">    time.sleep(<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">return</span> x*y</span><br></pre></td></tr></table></figure></li>
<li>step4:在celery_demo同级目录下新建app.py文件，代码如下，分别发送执行任务消息到broker<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">from</span> celery_demo import task<span class="number">1</span>,task<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#apply_async和delay都表示调用异步任务</span></span><br><span class="line"><span class="attribute">task1</span>.add.delay(<span class="number">2</span>,<span class="number">4</span>)</span><br><span class="line"><span class="comment"># task1.add.apply_async(2,4)</span></span><br><span class="line"><span class="attribute">task2</span>.mut.delay(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="attribute">print</span>(&#x27;end...&#x27;)</span><br></pre></td></tr></table></figure>
demo目录结构如下<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">app.<span class="keyword">py</span></span><br><span class="line">celery_demo/</span><br><span class="line">    __init__.<span class="keyword">py</span></span><br><span class="line">    celeryconfig.<span class="keyword">py</span></span><br><span class="line">    task1.<span class="keyword">py</span></span><br><span class="line">    task2.<span class="keyword">py</span></span><br></pre></td></tr></table></figure></li>
<li>step5:进入celery_demo同级的目录，打开终端，启动worker<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">celery</span> worker -A celery_demo -l <span class="meta">INFO</span></span><br></pre></td></tr></table></figure>
<img src="/images/celery/Celery_worker.png" align="center">
再打开另一个终端，发送执行任务消息，进行如下操作
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">python3</span> app.<span class="keyword">py</span></span><br></pre></td></tr></table></figure>
<img src="/images/celery/Celery_worker_run.png" align="center"></li>
</ul>
<h4 id="定时任务（Celery-Beat）"><a href="#定时任务（Celery-Beat）" class="headerlink" title="定时任务（Celery Beat）"></a>定时任务（Celery Beat）</h4><ul>
<li>step1:在之前celery_demo文件夹下celeryconfig.py文件中，添加如下代码<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> timedelta</span><br><span class="line"><span class="keyword">from</span> celery.schedules <span class="keyword">import</span> crontab</span><br><span class="line"></span><br><span class="line">#设置定时任务</span><br><span class="line">beat_schedule = &#123;</span><br><span class="line">    <span class="string">&#x27;task1&#x27;</span>:&#123;</span><br><span class="line">        <span class="string">&#x27;task&#x27;</span>:<span class="string">&#x27;celery_demo.task1.add&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;schedule&#x27;</span>:timedelta(seconds=<span class="number">30</span>), #表示每<span class="number">30</span>秒发送一次任务消息</span><br><span class="line">        <span class="string">&#x27;args&#x27;</span>:(<span class="number">10</span>,<span class="number">20</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;task2&#x27;</span>:&#123;</span><br><span class="line">        <span class="string">&#x27;task&#x27;</span>:<span class="string">&#x27;celery_demo.task2.mut&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;schedule&#x27;</span>:crontab(hour=<span class="number">14</span>,minute=<span class="number">25</span>), #表示在每天的下午<span class="number">14</span>点<span class="number">25</span>分发送一次任务消息</span><br><span class="line">        <span class="string">&#x27;args&#x27;</span>:(<span class="number">10</span>,<span class="number">10</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>step2:打开终端，启动定时消息任务，执行如下命令<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">celery</span> beat -A celery_demo -l <span class="meta">INFO</span></span><br></pre></td></tr></table></figure>
运行时报错如下<figure class="highlight lasso"><table><tr><td class="code"><pre><span class="line">celery<span class="params">-beat</span> KeyError: <span class="string">&#x27;scheduler&#x27;</span></span><br><span class="line">Removing corrupted schedule file <span class="string">&#x27;celerybeat-schedule&#x27;</span>: error(<span class="number">22</span>, <span class="string">&#x27;Invalid argument&#x27;</span>)</span><br><span class="line"><span class="params">...</span><span class="params">...</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="KeyError-‘scheduler’解决方法"><a href="#KeyError-‘scheduler’解决方法" class="headerlink" title="KeyError: ‘scheduler’解决方法"></a>KeyError: ‘scheduler’解决方法</h3><figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">pip <span class="keyword">install </span>celery-redbeat</span><br><span class="line"><span class="comment"># celeryconfig.py文件添加</span></span><br><span class="line">app.conf.redbeat_redis_url = <span class="string">&quot;redis://localhost:6379/3&quot;</span></span><br><span class="line"><span class="comment"># 用以下命令重新启动定时消息任务</span></span><br><span class="line">celery <span class="keyword">beat </span>-A celery_demo -l INFO -S redbeat.RedBeatScheduler</span><br></pre></td></tr></table></figure>
<img src="/images/celery/beat.png" align="center">
对应worker端截图如下
<img src="/images/celery/beat_worker.png" align="center">

<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://zhuanlan.zhihu.com/p/64595171">Celery介绍和基本使用</a><br><a href="https://www.cnblogs.com/chenice/p/6918435.html">Celery 分布式任务队列入门</a><br><a href="https://www.celerycn.io/ru-men/celery-jian-jie">Celery 中文手册</a><br><a href="https://www.cnblogs.com/cwp-bg/p/8759638.html">python之celery使用详解</a><br><a href="https://www.debugcn.com/en/article/39785884.html">celery-beat KeyError: ‘scheduler’</a></p>
]]></content>
      <categories>
        <category>编程技能提升</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Celery</tag>
        <tag>分布式任务</tag>
      </tags>
  </entry>
  <entry>
    <title>Git 使用教程</title>
    <url>/2021/05/22/Git-%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><ul>
<li><p><strong>工作区</strong> 电脑里能看到的目录。</p>
</li>
<li><p><strong>暂存区</strong> 存放在 .git 目录下的 index 文件（.git/index）中，所以也叫作索引（index）。</p>
</li>
<li><p><strong>版本库</strong> 工作区有一个隐藏目录 .git，这个不算工作区，而是 Git 的版本库。</p>
<img src="/images/git/1352126739_7909.jpg" align="center"></li>
<li><p>图中左侧为工作区，右侧为版本库。在版本库中标记为 “index” 的区域是暂存区（stage/index），标记为 “master” 的是 master 分支所代表的目录树。</p>
</li>
<li><p>图中我们可以看出此时 “HEAD” 实际是指向 master 分支的一个”游标”。所以图示的命令中出现 HEAD 的地方可以用 master 来替换。</p>
</li>
<li><p>图中的 objects 标识的区域为 Git 的对象库，实际位于 “.git/objects” 目录下，里面包含了创建的各种对象及内容。</p>
<span id="more"></span></li>
<li><p>当对工作区修改（或新增）的文件执行 <code>git add</code> 命令时，暂存区的目录树被更新，同时工作区修改（或新增）的文件内容被写入到对象库中的一个新的对象中，而该对象的ID被记录在暂存区的文件索引中。</p>
</li>
<li><p>当执行提交操作（git commit）时，暂存区的目录树写到版本库（对象库）中，master 分支会做相应的更新。即 master 指向的目录树就是提交时暂存区的目录树。</p>
</li>
<li><p>当执行 <code>git reset HEAD</code> 命令时，暂存区的目录树会被重写，被 master 分支指向的目录树所替换，但是工作区不受影响。</p>
</li>
<li><p>当执行 <code>git rm --cached &lt;file&gt;</code> 命令时，会直接从暂存区删除文件，工作区则不做出改变。</p>
</li>
<li><p>当执行 <code>git checkout</code> . 或者 <code>git checkout -- &lt;file&gt;</code> 命令时，会用暂存区全部或指定的文件替换工作区的文件。这个操作很危险，会清除工作区中未添加到暂存区的改动。</p>
</li>
<li><p>当执行 <code>git checkout HEAD</code> . 或者 <code>git checkout HEAD &lt;file&gt;</code> 命令时，会用 HEAD 指向的 master 分支中的全部或者部分文件替换暂存区和以及工作区中的文件。这个命令也是极具危险性的，因为不但会清除工作区中未提交的改动，也会清除暂存区中未提交的改动。</p>
<h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3></li>
<li><p>Workspace：工作区</p>
</li>
<li><p>Index / Stage：暂存区</p>
</li>
<li><p>Repository：仓库区（或本地仓库）</p>
</li>
<li><p>Remote：远程仓库</p>
<img src="/images/git/bg2015120901.png" align="center"></li>
</ul>
<ol>
<li><code>git clone</code> 下载远程代码仓库到本地。</li>
<li>创建了自己的文件，或者进行了修改，可以用 <code>git add .</code> 把所有文件加入暂存区，等待建立节点。</li>
<li><code>git commit -m &quot;这一阶段工作描述&quot;</code> 建立本地仓库的工作节点，尽量细化你的节点，别做了很多工作才提交一次。</li>
<li><code>git push</code> 把之前建立的一系列节点推送到 GitHub 发布、保存。</li>
<li><code>git pull</code> 将 GitHub 的改动同步到本地，比如你在办公室电脑的改动同步到家里，或者多人协作项目中他人的改动同步到本地。<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4>Git的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。<figure class="highlight dsconfig"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 显示当前的Git配置</span></span><br><span class="line">$ <span class="string">git</span> <span class="string">config</span> <span class="built_in">--list</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑Git配置文件</span></span><br><span class="line">$ <span class="string">git</span> <span class="string">config</span> -<span class="string">e</span> [<span class="built_in">--global]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置提交代码时的用户信息</span></span><br><span class="line">$ <span class="string">git</span> <span class="string">config</span> [<span class="built_in">--global]</span> <span class="string">user</span>.<span class="string">name</span> <span class="string">&quot;[name]&quot;</span></span><br><span class="line">$ <span class="string">git</span> <span class="string">config</span> [<span class="built_in">--global]</span> <span class="string">user</span>.<span class="string">email</span> <span class="string">&quot;[email address]&quot;</span></span><br></pre></td></tr></table></figure>
<h4 id="新建代码库"><a href="#新建代码库" class="headerlink" title="新建代码库"></a>新建代码库</h4><figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 新建一个目录，将其初始化为Git代码库，project-name可省略</span></span><br><span class="line">$ git init [project-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载一个项目和它的整个代码历史，another-name可省略</span></span><br><span class="line">$ git <span class="keyword">clone</span> <span class="title">[url</span>] [another-name]</span><br></pre></td></tr></table></figure>
<code>git clone</code> 包括了以下几步：</li>
</ol>
<ul>
<li><code>git init</code> (create the local repository)</li>
<li><code>git remote add origin $&#123;URL&#125;</code> (add the URL to that repository)</li>
<li><code>git fetch</code> (fetch all branches from that URL to your local repository)</li>
<li><code>git checkout</code> (create all the files of the main branch in your working tree)<h4 id="提交与修改"><a href="#提交与修改" class="headerlink" title="提交与修改"></a>提交与修改</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># git status 命令用于查看在你上次提交之后是否有对文件进行再次修改</span></span><br><span class="line"><span class="variable">$</span> git status <span class="literal">-s</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># git status 显示你上次提交更新后的更改或者写入缓存的改动， 而 git diff 一行一行地显示这些改动具体是啥</span></span><br><span class="line"><span class="variable">$</span> git <span class="built_in">diff</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加指定文件到暂存区</span></span><br><span class="line"><span class="variable">$</span> git add [<span class="type">file1</span>] [<span class="type">file2</span>] ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加指定目录到暂存区，包括子目录</span></span><br><span class="line"><span class="variable">$</span> git add [<span class="type">dir</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加当前目录的所有文件到暂存区</span></span><br><span class="line"><span class="variable">$</span> git add .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除工作区文件，并且将这次删除放入暂存区</span></span><br><span class="line"><span class="variable">$</span> git <span class="built_in">rm</span> [<span class="type">file1</span>] [<span class="type">file2</span>] ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止追踪指定文件，但该文件会保留在工作区</span></span><br><span class="line"><span class="variable">$</span> git <span class="built_in">rm</span> -<span class="literal">-cached</span> [<span class="type">file</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 改名文件，并且将这个改名放入暂存区</span></span><br><span class="line"><span class="variable">$</span> git <span class="built_in">mv</span> [<span class="type">file</span>-<span class="type">original</span>] [<span class="type">file</span>-<span class="type">renamed</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交暂存区到仓库区</span></span><br><span class="line"><span class="variable">$</span> git commit <span class="literal">-m</span> [<span class="type">message</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交暂存区的指定文件到仓库区</span></span><br><span class="line"><span class="variable">$</span> git commit [<span class="type">file1</span>] [<span class="type">file2</span>] ... <span class="literal">-m</span> [<span class="type">message</span>]</span><br></pre></td></tr></table></figure>
<h4 id="远程操作"><a href="#远程操作" class="headerlink" title="远程操作"></a>远程操作</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 显示所有远程仓库</span></span><br><span class="line"><span class="variable">$</span> git remote <span class="literal">-v</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加一个新的远程仓库，并命名</span></span><br><span class="line"><span class="variable">$</span> git remote add [<span class="type">shortname</span>] [<span class="type">url</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除远程仓库</span></span><br><span class="line"><span class="variable">$</span> git remote <span class="built_in">rm</span> [<span class="type">shortname</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载远程仓库的所有变动</span></span><br><span class="line"><span class="variable">$</span> git fetch [<span class="type">remote</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取回远程仓库的变化，并与本地分支合并</span></span><br><span class="line"><span class="variable">$</span> git pull [<span class="type">remote</span>] [<span class="type">branch</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上传本地指定分支到远程仓库</span></span><br><span class="line"><span class="variable">$</span> git push [<span class="type">remote</span>] [<span class="type">branch</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 强行推送当前分支到远程仓库，即使有冲突</span></span><br><span class="line"><span class="variable">$</span> git push [<span class="type">remote</span>] -<span class="literal">-force</span></span><br></pre></td></tr></table></figure></li>
<li><code>git pull [remote] [branch]</code> 相当于<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 获取远程仓库有而本地没有的数据</span></span><br><span class="line"><span class="bullet">-</span> git fetch [remote]</span><br><span class="line"><span class="section"># 将服务器上的任何更新（假设有人这时候推送到服务器了）合并到你的当前分支</span></span><br><span class="line"><span class="bullet">-</span> git merge [remote]/[branch]</span><br></pre></td></tr></table></figure>
<h4 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h4><figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列出所有本地分支</span></span><br><span class="line">$ git <span class="keyword">branch</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="comment"># 列出所有远程分支</span></span><br><span class="line">$ git <span class="keyword">branch </span>-r</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，但依然停留在当前分支</span></span><br><span class="line">$ git <span class="keyword">branch </span>[<span class="keyword">branch-name]</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="comment"># 切换到指定分支，并更新工作区</span></span><br><span class="line">$ git checkout [<span class="keyword">branch-name]</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="comment"># 合并指定分支到当前分支</span></span><br><span class="line">$ git merge [<span class="keyword">branch]</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="comment"># 删除分支</span></span><br><span class="line">$ git <span class="keyword">branch </span>-d [<span class="keyword">branch-name]</span></span><br></pre></td></tr></table></figure>
<h4 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h4><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"># 恢复暂存区的指定文件到工作区</span><br><span class="line">$ git checkout [file]</span><br><span class="line"></span><br><span class="line"># 恢复某个<span class="keyword">commit</span>的指定文件到暂存区和工作区</span><br><span class="line">$ git checkout [<span class="keyword">commit</span>] [file]</span><br><span class="line"></span><br><span class="line"># git <span class="keyword">reset</span> 命令用于回退版本，可以指定退回某一次提交的版本。</span><br><span class="line"># 重置暂存区的指定文件，与上一次<span class="keyword">commit</span>保持一致，但工作区不变</span><br><span class="line">$ git <span class="keyword">reset</span> [file]</span><br><span class="line"></span><br><span class="line"># 重置暂存区与工作区，与上一次<span class="keyword">commit</span>保持一致</span><br><span class="line">$ git <span class="keyword">reset</span> <span class="comment">--hard</span></span><br><span class="line"></span><br><span class="line"># 重置当前分支的指针为指定<span class="keyword">commit</span>，同时重置暂存区，但工作区不变</span><br><span class="line">$ git <span class="keyword">reset</span> [<span class="keyword">commit</span>]</span><br><span class="line"></span><br><span class="line"># 重置当前分支的HEAD为指定<span class="keyword">commit</span>，同时重置暂存区和工作区，与指定<span class="keyword">commit</span>一致</span><br><span class="line">$ git <span class="keyword">reset</span> <span class="comment">--hard [commit]</span></span><br><span class="line"></span><br><span class="line"># git <span class="keyword">reset</span> HEAD 用以取消之前 git <span class="keyword">add</span> 添加，但不希望包含在下一提交快照中的缓存</span><br></pre></td></tr></table></figure>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><a href="https://www.runoob.com/git/git-tutorial.html">runoob.com|Git 教程</a><br><a href="http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html">阮一峰|常用 Git 命令清单</a></li>
</ul>
]]></content>
      <categories>
        <category>效率工具</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown使用教程</title>
    <url>/2021/05/19/Markdown%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><figure class="highlight clean"><table><tr><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br><span class="line">#### 四级标题</span><br><span class="line">##### 五级标题</span><br><span class="line">###### 六级标题</span><br></pre></td></tr></table></figure>

<p>显示效果：</p>
<img src="/images/markdown/md_title.gif" width="50%" height="50%" align="center">

<h3 id="段落换行"><a href="#段落换行" class="headerlink" title="段落换行"></a>段落换行</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">注释：两行之间插入空行</span><br><span class="line">段落1</span><br><span class="line"></span><br><span class="line">段落2</span><br></pre></td></tr></table></figure>
<p>显示效果：<br>段落1</p>
<p>段落2</p>
<span id="more"></span>
<h3 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h3><figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line"><span class="symbol">_</span>斜体文本<span class="symbol">_</span></span><br><span class="line"><span class="symbol">__</span>粗体文本<span class="symbol">__</span></span><br><span class="line">___粗斜体文本___</span><br></pre></td></tr></table></figure>
<p>显示效果：<br><em>斜体文本</em><br><strong>粗体文本</strong><br><em><strong>粗斜体文本</strong></em></p>
<h3 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h3><figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">注释：减号空格减号空格减号空格</span><br><span class="line"><span class="bullet">- </span>- -</span><br></pre></td></tr></table></figure>
<p>显示效果：</p>
<hr>
<h3 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">注释：文字两端加上两个波浪线</span><br><span class="line">hello ~~我是删除线~~</span><br></pre></td></tr></table></figure>
<p>显示效果：<br>hello <del>我是删除线</del></p>
<h3 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">注释：下划线可通过<span class="tag">&lt;<span class="name">u</span>&gt;</span>我是下划线文本<span class="tag">&lt;/<span class="name">u</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>显示效果：<br><u>我是下划线文本</u></p>
<h3 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">注释：脚注是对文本的补充说明</span><br><span class="line">脚注示例[^我是脚注]</span><br><span class="line">[<span class="symbol">^我是脚注</span>]: <span class="link">对文本的补充说明！</span></span><br></pre></td></tr></table></figure>
<p>显示效果：<br><img src="/images/markdown/md_jiaozhu.gif" width="50%" height="50%" align="center"></p>
<h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><h4 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h4><figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">注释：-空格内容</span><br><span class="line"><span class="bullet">- </span>第一项</span><br><span class="line"><span class="bullet">- </span>第二项</span><br><span class="line"><span class="bullet">- </span>第三项</span><br></pre></td></tr></table></figure>
<p>显示效果：</p>
<ul>
<li>第一项</li>
<li>第二项</li>
<li>第三项</li>
</ul>
<h4 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h4><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">注释：数字.空格内容</span><br><span class="line"><span class="bullet">1.</span> 第一项</span><br><span class="line"><span class="bullet">2.</span> 第二项</span><br><span class="line"><span class="bullet">3.</span> 第三项</span><br></pre></td></tr></table></figure>
<p>显示效果：</p>
<ol>
<li>第一项</li>
<li>第二项</li>
<li>第三项</li>
</ol>
<h4 id="列表嵌套"><a href="#列表嵌套" class="headerlink" title="列表嵌套"></a>列表嵌套</h4><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">注释：子列表的选项前面添加四个空格</span><br><span class="line"><span class="bullet">-</span> 第一项</span><br><span class="line"><span class="bullet">    -</span> 我是子列表项1.1</span><br><span class="line"><span class="bullet">    -</span> 我是子列表项1.2</span><br><span class="line"><span class="bullet">-</span> 第二项</span><br><span class="line"><span class="bullet">    -</span> 我是子列表项2.1</span><br><span class="line"><span class="bullet">    -</span> 我是子列表项2.2</span><br></pre></td></tr></table></figure>
<p>显示效果：</p>
<ul>
<li>第一项<ul>
<li>我是子列表项1.1</li>
<li>我是子列表项1.2</li>
</ul>
</li>
<li>第二项<ul>
<li>我是子列表项2.1</li>
<li>我是子列表项2.2</li>
</ul>
</li>
</ul>
<h3 id="区块"><a href="#区块" class="headerlink" title="区块"></a>区块</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">注释：&gt;空格内容</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> 最外层</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt; 第一层嵌套</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; 第二层嵌套</span></span><br></pre></td></tr></table></figure>
<p>显示效果：</p>
<blockquote>
<p>最外层</p>
<blockquote>
<p>第一层嵌套</p>
<blockquote>
<p>第二层嵌套</p>
</blockquote>
</blockquote>
</blockquote>
<p><em><strong>区块可以嵌套列表，列表可以嵌套区块</strong></em></p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 用 ``` 包裹一段代码，并指定一种语言（也可以不指定）</span></span><br><span class="line"><span class="comment"># 段落上的一个函数或片段的代码可以用反引号把它包起来（`）</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span>(<span class="params">*args,**kwargs</span>):</span></span><br><span class="line">	<span class="built_in">print</span>(*args.**kwargs)</span><br></pre></td></tr></table></figure>
<p>此处，<code>log</code>函数与<code>print</code>函数功能是一样的</p>
<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-attr">[这是我的个人网站]</span>(<span class="attribute">https</span>:<span class="comment">//www.codejerry.top)</span></span><br></pre></td></tr></table></figure>
<p>显示效果：<br><a href="https://www.codejerry.top/">这是我的个人网站</a></p>
<h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">方式<span class="number">1</span></span><br><span class="line">![替代文本](https:<span class="regexp">//</span>codejerry.top<span class="regexp">/images/</span>avatar.jpg <span class="string">&quot;网站头像&quot;</span>)</span><br><span class="line">方式<span class="number">2</span>（可以指定图片的宽、高、位置）</span><br><span class="line">&lt;img src=<span class="string">&quot;https://codejerry.top/images/avatar.jpg&quot;</span> width=<span class="string">&quot;20%&quot;</span> height=<span class="string">&quot;20%&quot;</span> align=<span class="string">&quot;center&quot;</span>&gt;</span><br></pre></td></tr></table></figure>
<p>显示效果：<br><img src="https://codejerry.top/images/avatar.jpg" alt="替代文本" title="网站头像"></p>
<img src="https://codejerry.top/images/avatar.jpg" width="20%" height="20%" align="center">

<h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">注释：|<span class="string">分割不同的单元格，-分割表头和其他行</span></span><br><span class="line"><span class="string"></span>|<span class="string">表头</span>|<span class="string">表头</span>|</span><br><span class="line">|<span class="string">-</span>|<span class="string">-</span>|</span><br><span class="line">|<span class="string">单元格</span>|<span class="string">单元格</span>|</span><br><span class="line">|<span class="string">单元格</span>|<span class="string">单元格</span>|</span><br></pre></td></tr></table></figure>
<p>显示效果：<br><img src="/images/markdown/md_table.jpg" width="50%" height="50%" align="center"></p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">注释：设置表格对齐方式</span><br><span class="line">  <span class="symbol">:-</span>左对齐</span><br><span class="line">  -<span class="symbol">:</span>右对齐</span><br><span class="line">  <span class="symbol">:-</span><span class="symbol">:</span>居中对齐</span><br></pre></td></tr></table></figure>
<p>显示效果：<br><img src="/images/markdown/md_table_align.jpg" width="50%" height="50%" align="center"></p>
<h3 id="高级技巧"><a href="#高级技巧" class="headerlink" title="高级技巧"></a>高级技巧</h3><h4 id="支持的-HTML-元素"><a href="#支持的-HTML-元素" class="headerlink" title="支持的 HTML 元素"></a>支持的 HTML 元素</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">注释：目前支持的 HTML 元素有：<span class="tag">&lt;<span class="name">kbd</span>&gt;</span> <span class="tag">&lt;<span class="name">b</span>&gt;</span> <span class="tag">&lt;<span class="name">i</span>&gt;</span> <span class="tag">&lt;<span class="name">em</span>&gt;</span> <span class="tag">&lt;<span class="name">sup</span>&gt;</span> <span class="tag">&lt;<span class="name">sub</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span>等</span><br><span class="line">使用 <span class="tag">&lt;<span class="name">kbd</span>&gt;</span>Ctrl<span class="tag">&lt;/<span class="name">kbd</span>&gt;</span>+<span class="tag">&lt;<span class="name">kbd</span>&gt;</span>Alt<span class="tag">&lt;/<span class="name">kbd</span>&gt;</span>+<span class="tag">&lt;<span class="name">kbd</span>&gt;</span>Del<span class="tag">&lt;/<span class="name">kbd</span>&gt;</span> 重启电脑</span><br></pre></td></tr></table></figure>
<p>显示效果：<br>使用 <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd> 重启电脑</p>
<h4 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h4><figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">注释：<span class="string">\加上待转义符号</span></span><br><span class="line"><span class="string">\\</span></span><br><span class="line"><span class="string">\*</span></span><br><span class="line"><span class="string">\()</span></span><br></pre></td></tr></table></figure>
<p>显示效果：<br>\<br>*<br>()</p>
<h4 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h4><figure class="highlight taggerscript"><table><tr><td class="code"><pre><span class="line">注释：使用两个美元符 $$ 包裹 TeX 或 LaTeX 格式的数学公式</span><br><span class="line">$$</span><br><span class="line"><span class="symbol">\m</span>athbf&#123;V&#125;_1 <span class="symbol">\t</span>imes <span class="symbol">\m</span>athbf&#123;V&#125;_2 =  <span class="symbol">\b</span>egin&#123;vmatrix&#125; </span><br><span class="line"><span class="symbol">\m</span>athbf&#123;i&#125; &amp; <span class="symbol">\m</span>athbf&#123;j&#125; &amp; <span class="symbol">\m</span>athbf&#123;k&#125; <span class="symbol">\\</span></span><br><span class="line"><span class="symbol">\f</span>rac&#123;<span class="symbol">\p</span>artial X&#125;&#123;<span class="symbol">\p</span>artial u&#125; &amp;  <span class="symbol">\f</span>rac&#123;<span class="symbol">\p</span>artial Y&#125;&#123;<span class="symbol">\p</span>artial u&#125; &amp; 0 <span class="symbol">\\</span></span><br><span class="line"><span class="symbol">\f</span>rac&#123;<span class="symbol">\p</span>artial X&#125;&#123;<span class="symbol">\p</span>artial v&#125; &amp;  <span class="symbol">\f</span>rac&#123;<span class="symbol">\p</span>artial Y&#125;&#123;<span class="symbol">\p</span>artial v&#125; &amp; 0 <span class="symbol">\\</span></span><br><span class="line"><span class="symbol">\e</span>nd&#123;vmatrix&#125;</span><br><span class="line">$&#123;<span class="keyword">$tep1&#125;&#123;\style&#123;visibility:hidden&#125;&#123;</span>(x+1)(x+1)&#125;&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure>
<p>显示效果：<br><img src="/images/markdown/md_math.jpg" width="50%" height="50%" align="center"></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.runoob.com/markdown/md-tutorial.html">runoob.com|Markdown 教程</a></p>
]]></content>
      <categories>
        <category>效率工具</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>利用 GitHub Actions 自动化发布Hexo网站</title>
    <url>/2021/05/23/%E5%88%A9%E7%94%A8-GitHub-Actions-%E8%87%AA%E5%8A%A8%E5%8C%96%E5%8F%91%E5%B8%83Hexo%E7%BD%91%E7%AB%99/</url>
    <content><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>GitHub+Hexo 搭建个人博客非本文重点，请自行搜索。<br>成功搭建博客以后，每次写完文章，通过执行 <code>hexo clean &amp;&amp; hexo g -d</code> 来发布，当你文章比较多的时候，可能还需要等待很久，而且还可能会遇到本地安装的 <code>Node.js</code> 版本与 <code>Hexo</code> 不兼容的问题，利用 <code>GitHub Actions</code> 自动部署 <code>hexo</code> 到 <code>Github Pages</code>，只需在文章写完后运行<code>git push origin master</code>命令，等待20秒，文章自动发布成功。</p>
<span id="more"></span>

<h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><ol>
<li>存放代码仓库 <code>blog_source</code></li>
<li>存放静态博客页面仓库 <code>CodeingJerry.github.io</code></li>
</ol>
<h3 id="准备密钥"><a href="#准备密钥" class="headerlink" title="准备密钥"></a>准备密钥</h3><ol>
<li>电脑上生成密钥<br><code>ssh-keygen -t rsa -C &quot;这里换上你的邮箱&quot; # 三次回车即可</code>，在指定的保存路径下会生成2个名为id_rsa和id_rsa.pub的文件。</li>
<li>打开 <a href="https://github.com/CodeingJerry/blog_source/settings/secrets">https://github.com/CodeingJerry/blog_source/settings/secrets</a> 点击 New repository secret，分别在  Name 输入 <code>WIN7_HEXO_DEPLOY_PRI</code>，  Value 输入前面生成的<code>id_rsa</code> 的内容。</li>
<li>打开你的<code>github</code>，进入配置页： Settings – SSH and GPG keys，选择<code>New SSH key</code>，然后用文本工具打开之前生成的<code>id_rsa.pub</code>文件，把内容拷贝到key下面的输入框，并为这个key定义一个名称（通常用来区分不同主机），然后保存。</li>
</ol>
<h3 id="Hexo-配置"><a href="#Hexo-配置" class="headerlink" title="Hexo 配置"></a>Hexo 配置</h3><p>在项目根目录中修改 <code>_config.yml</code></p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">deploy:</span></span><br><span class="line"><span class="symbol">  type:</span> git</span><br><span class="line"><span class="symbol">  repo:</span> git@github.com:CodeingJerry/CodeingJerry.github.io.git</span><br><span class="line"><span class="symbol">  branch:</span> master</span><br></pre></td></tr></table></figure>

<h3 id="编写-GitHub-Actions"><a href="#编写-GitHub-Actions" class="headerlink" title="编写 GitHub Actions"></a>编写 GitHub Actions</h3><p>在 blog_source 仓库根目录下创建 .github/workflows/deploy.yml 文件，目录结构如下。</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">blog_source <span class="params">(repository)</span></span><br><span class="line">└── <span class="string">.github</span></span><br><span class="line">    └── workflows</span><br><span class="line">        └── <span class="keyword">deploy</span>.yml</span><br></pre></td></tr></table></figure>
<p>在 deploy.yml 文件中粘贴以下内容，注释可以删除。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">Hexo</span> <span class="string">Blog</span> <span class="comment"># 此 Action 的名字</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">master</span> <span class="comment"># 当 master 分支有新push时运行</span></span><br><span class="line"></span><br><span class="line"><span class="attr">env:</span> <span class="comment"># 定义环境变量</span></span><br><span class="line">  <span class="attr">GIT_USER:</span> <span class="string">CodeingJerry</span></span><br><span class="line">  <span class="attr">GIT_EMAIL:</span> <span class="number">895277169</span><span class="string">@qq.com</span></span><br><span class="line">  <span class="attr">THEME_REPO:</span> <span class="string">theme-next/hexo-theme-next</span></span><br><span class="line">  <span class="attr">THEME_BRANCH:</span> <span class="string">master</span></span><br><span class="line">  <span class="attr">DEPLOY_REPO:</span> <span class="string">CodeingJerry/CodeingJerry.github.io</span></span><br><span class="line">  <span class="attr">DEPLOY_BRANCH:</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span> <span class="comment"># 一项叫做build的任务</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Build</span> <span class="string">on</span> <span class="string">node</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.node_version</span> <span class="string">&#125;&#125;</span> <span class="string">and</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.os</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span> <span class="comment"># 在最新版的Ubuntu系统下运行</span></span><br><span class="line">    <span class="attr">strategy:</span></span><br><span class="line">      <span class="attr">matrix:</span></span><br><span class="line">        <span class="attr">os:</span> [<span class="string">ubuntu-latest</span>]</span><br><span class="line">        <span class="attr">node_version:</span> [<span class="number">12.</span><span class="string">x</span>]</span><br><span class="line"></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="comment"># 将仓库内master分支的内容下载到工作目录</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span> <span class="comment"># 脚本来自 https://github.com/actions/checkout</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">theme</span> <span class="string">repo</span> <span class="comment"># 将theme-next/hexo-theme-next仓库内master分支的内容下载到themes/next</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">repository:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.THEME_REPO</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">ref:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.THEME_BRANCH</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">themes/next</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">deploy</span> <span class="string">repo</span> <span class="comment"># 将CodeingJerry/CodeingJerry.github.io仓库内master分支的内容下载到.deploy_git</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">repository:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.DEPLOY_REPO</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">ref:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.DEPLOY_BRANCH</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">.deploy_git</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Use</span> <span class="string">Node.js</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.node_version</span> <span class="string">&#125;&#125;</span> <span class="comment"># 安装Node</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-node@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.node_version</span> <span class="string">&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Configuration</span> <span class="string">environment</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">HEXO_DEPLOY_PRI:</span> <span class="string">$&#123;&#123;secrets.WIN7_HEXO_DEPLOY_PRI&#125;&#125;</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          sudo timedatectl set-timezone &quot;Asia/Shanghai&quot; # 设置时区</span></span><br><span class="line"><span class="string">          mkdir -p ~/.ssh/</span></span><br><span class="line"><span class="string">          echo &quot;$HEXO_DEPLOY_PRI&quot; &gt; ~/.ssh/id_rsa # 配置秘钥</span></span><br><span class="line"><span class="string">          chmod 600 ~/.ssh/id_rsa</span></span><br><span class="line"><span class="string">          ssh-keyscan github.com &gt;&gt; ~/.ssh/known_hosts</span></span><br><span class="line"><span class="string">          git config --global user.name $GIT_USER</span></span><br><span class="line"><span class="string">          git config --global user.email $GIT_EMAIL</span></span><br><span class="line"><span class="string">          cp _config.theme.yml themes/next/_config.yml # 自定义主题配置文件</span></span><br><span class="line"><span class="string"></span>      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">dependencies</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          npm install # package.json的devDependencies字段里的插件会被自动安装到node_modules下</span></span><br><span class="line"><span class="string"></span>      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">hexo</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">npm</span> <span class="string">run</span> <span class="string">deploy</span> <span class="comment"># 执行package.json中的deploy命令即hexo deploy </span></span><br></pre></td></tr></table></figure>

<h3 id="主题配置文件"><a href="#主题配置文件" class="headerlink" title="主题配置文件"></a>主题配置文件</h3><p>复制一份主题配置文件，重命名为 _config.theme.yml，放置blog_source根目录。<br>最终目录结构</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">blog_source (repository)</span><br><span class="line">├── _config<span class="selector-class">.theme</span><span class="selector-class">.yml</span></span><br><span class="line">└── <span class="selector-class">.github</span></span><br><span class="line">    └── workflows</span><br><span class="line">        └── deploy.yml</span><br></pre></td></tr></table></figure>
<p>把 _config.theme.yml 与 deploy.yml 文件推送到 blog_source 仓库，在此仓库 Actions 页面可以看到一个名字为 Deploy Hexo Blog 的 Action。</p>
<h3 id="执行任务"><a href="#执行任务" class="headerlink" title="执行任务"></a>执行任务</h3><p>写一篇文章，push 到 blog_source 仓库的 master 分支，在此仓库 Actions 页面查看当前 task。<br><img src="/images/github_actions/github_actions.png" align="center"><br>查看自己的博客，不出意外的话已经可以看到新添加的文章了。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://sanonz.github.io/2020/deploy-a-hexo-blog-from-github-actions/">利用 Github Actions 自动部署 Hexo 博客</a><br><a href="https://hdj.me/github-actions-hexo-cicd/">如何正确的使用 GitHub Actions 实现 Hexo 博客的 CICD</a><br><a href="http://www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.html">GitHub Actions 入门教程</a><br><a href="http://www.ruanyifeng.com/blog/2016/10/npm_scripts.html">npm scripts 使用指南</a></p>
]]></content>
      <categories>
        <category>效率工具</category>
      </categories>
      <tags>
        <tag>GitHub Actions,Hexo</tag>
      </tags>
  </entry>
</search>
